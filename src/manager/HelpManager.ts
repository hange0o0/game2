class HelpManager {
    private static _instance:HelpManager;

    public static getInstance():HelpManager {
        if (!this._instance)
            this._instance = new HelpManager();
        return this._instance;
    }

    private helpObj = {};
    private infoList = [];
    public constructor() {

        this.helpObj['pos'] = {
            title:'阵容配置',
            list:[
                '改变位置：玩家可拖动卡牌进行位置调整',
                '移除卡牌：点击卡牌可使其从该阵容中移除',
                '增加卡牌：当阵容未达上限时，点击列表中最后一个[+]的位置，可打开[选择卡牌]列表，增加的卡牌会自动放入队列的最后端',
                '查看卡牌：长按卡牌可弹出卡牌详情',
                '阵容中的卡牌上限取决于玩家的['+TecVO.getObject(4).name+']科技等级，等级越高，阵容可容纳的卡牌越多',
                '玩家可使用[测试]攻能对当前卡组进行测试，测试对手由玩家从自己的进攻/防守阵容中选取',
            ]
        }

        this.helpObj['atkPos'] = {
            title:'进攻阵容',
            list:[
                '每个玩家最多可配置5个进攻阵容',
                '在每次出战前，玩家可挑选其中一个进行使用，也可跟据需要对其进行实时调整',
                '对战中，玩家手牌数量固定为'+PKConfig.maxHandCard+'张，当手牌数量不足时，会随机从[选中阵容]中抽取卡牌进行补充。当[选中阵容]的卡牌被抽光时，将不会有新的卡牌加入手牌',
                '阵容中所有卡牌以6个为一组按顺序进行分组，只有在前一组卡牌被抽光后，才会从下一组进行抽取，以此类推。由此，玩家能一定程度上对卡牌的出现顺序进行控制。',
            ].concat(this.helpObj['pos'].list)
        }
        this.helpObj['defPos'] = {
            title:'防守阵容',
            list:[
                '每个玩家最多可拥有5个防守阵容',
                '玩家可设置防守阵容是否被使用，当设置为停用时，系统将不会使用其进行防守',
                '当玩家被攻击时，系统会自动从防守阵容中随机抽取一个已启用的阵容进行迎战',
                '当防守阵容被动出战时，系统会按配置的顺序使用阵容中卡牌，使用时机取决于当时[能量]是否足够。一但[能量]满足，则会被马上使用',
                '玩家最少保有一个使用中的防守阵容',
                '防守阵容中的队伍防御力增加[10%]',
            ].concat(this.helpObj['pos'].list)
        }



        this.helpObj['posChoose'] = {
            title:'选择卡牌',
            list:[
                '玩家可从已解锁的卡牌中选择任意卡牌加到阵容中',
                '每张卡牌最多可使用3次',
                '卡牌分为[单位]和[法术]两种，玩家可通过TAB进行切换',
            ]
        }

        this.helpObj['slave'] = {
            title:'奴隶系统',
            list:[
                '玩家可击败其它玩家使其成为你的奴隶，也可被其它玩家击败成为其奴隶',
                '点击列表中的[+]，可打开系统推荐列表，玩家可挑战列表中的玩家进行收服，也可抢夺其奴隶，甚至其奴隶的奴隶',
                '收服奴隶成功后，该奴隶获得2小时的保护时间，不能反抗或被抢夺',
                '当玩家被其它玩家收服后，可进行反抗，反抗成功则可解除奴隶关系，并获得5分钟的保护时间',
                '玩家只能有一个主人，但可以有多名奴隶，升级['+TecVO.getObject(3).name+']科技等级，可提升奴隶数量上限',
                '玩家也可自主选择释放自己的奴隶，腾出奴隶空位',
                '玩家可使用钻石增加自己/奴隶的保护时间，保护时间内的玩家，不可被攻击/反抗',
                '成为主人后，可跟据奴隶的生产效率，获得其20%的[生产金币]收益，最多只能积累8小时，收取间隔为1小时',
                '成为奴隶后，金币生产效率下降20%',
            ]
        }


        this.helpObj['hang'] = {
            title:'战役系统',
            list:[
                '玩家可从战役中获取收益，收益的数量/种类会随着通过战役的数量而得到提高',
                '战役中主要掉落内容为：金币、资源及各种道具，升级对应的资源科技可使获取资源的效率获得[更多]提升',
                '战役累积奖励上限为8小时，超过时间则会停止累积',
                '通过战役后会有冷却时间，冷却时间结束后才能继续挑战下一关',
                '由于战役难度逐渐提高，升级[战力科技]提升玩家战力有助于玩家更快通关'
            ]
        }

        this.helpObj['card'] = {
            title:'卡牌系统',
            list:[
                '卡牌分为[单位]和[法术]两种',
                '上阵[单位]卡牌后，系统会按卡牌属性出兵冲向对手，如果能冲破对方出生点，则会对敌方总生命造成伤害',
                '上阵[法术]卡牌后，系统会释放一次对应法术，法术效果由卡牌属性决定',
                '需要注意的是，只有通过[单位]卡牌上阵的单位才能对敌方生命造成伤害，通过[召唤]出现的单位是具有持续时间和不能伤害敌方生命的',
                '[单位]卡牌分为：'+PKConfig.TYPENAME[1] + '、'+PKConfig.TYPENAME[2] + '、'+PKConfig.TYPENAME[3] +'，单位间克制关系为：' + PKConfig.TYPENAME[1] + '->'+PKConfig.TYPENAME[2] + '->'+PKConfig.TYPENAME[3]+ '->'+PKConfig.TYPENAME[1] ,
                '[法术]卡牌分为：'+PKConfig.SKILLTYPENAME[1] + '、'+PKConfig.SKILLTYPENAME[2] + '、'+PKConfig.SKILLTYPENAME[3]+ '、'+PKConfig.SKILLTYPENAME[4]+ '、'+PKConfig.SKILLTYPENAME[5],
                '所有卡牌都需要能量才能上阵，不同卡牌需要的能量值会不一样',
                '随着主城等级的提升，会出现更多未解锁卡牌',
                '解锁[单位]卡牌，需要投入指定的数量的金币进行购买',
                '解锁[法术]卡牌的方法有两种，其一是使用'+PropVO.getObject(102).propname + '进行抽取，其二是使用'+PropVO.getObject(103).propname + '进行兑换。',
                '抽取[法术]卡牌时，系统会从所有满足等级的卡牌中抽取一张。如果该卡牌未解锁，则为玩家进行解锁。如果已解锁，则返还一张'+PropVO.getObject(103).propname,
                '【费用】：上阵该卡牌需要的能量',
                '【传送次数】：[单位]卡牌在战斗中的出兵次数，达到数量后卡牌失效并移出',
                '【传送间隔】：[单位]卡牌的出兵间隔',
                '【持续时间】：[法术]卡牌的技能持续时间',
                '【施法间隔】：当[法术]卡牌触发多次时的触发间隔',
                '【血量】：[单位]卡牌中传送士兵属性，当血量为0时，该单位死亡',
                '【防御】：[单位]卡牌中传送士兵属性，能减少敌方士兵对其造成的伤害，可与队伍防御进行叠加',
                '【移动速度】：[单位]卡牌中传送士兵属性，数值越大，移动越快',
                '【伤害】：[单位]卡牌中传送士兵属性，冲破对方出生点后对敌方生命造成的伤害值，如果对方生命为0，则取得游戏胜利',
                '【攻击力】：[单位]卡牌中传送士兵属性，数值越大，对敌方士兵的伤害越大',
                '【攻击间隔】：[单位]卡牌中传送士兵属性，每次攻击的间隔时间',
                '【攻击距离】：[单位]卡牌中传送士兵属性，攻击发出时与敌人的最大距离',
                '【生物体积】：[单位]卡牌中传送士兵属性，当战场中已方的生物体积之和大于等于' + PKConfig.maxMonsterSpace + '时，上阵[单位]卡牌暂停出兵',
                '【技能间隔】：[单位]卡牌中传送士兵属性，士兵所拥有技能的触发时间间隔',
            ]
        }

        this.helpObj['pk'] = {
            title:'对战说明',
            list:[
                '战斗界面由上往下分别为对方出牌记录区，战场，我的出战区，我的手牌区',
                '战斗的过程一般为：从[手牌]选择合适的卡牌->将其拖入[出战区]-> [出战区]的卡牌生效后出现在[战场]-> [战场]中的单位冲过敌方出生点后造成伤害->当其中一方的生命被消耗为0时，游戏结束',
                '注意，当进入战斗时，战场中部会出现[防御石]，所有攻击其的单位会为已方队伍获取1点防御积分，每满5点积分增加1点队伍防御。[防御石]被攻击满50次后消失，由此刻起双方短兵相接',
                '当战斗卡牌被放入[出战区]时，都有3秒的准备时间，准备时间过后，卡牌即会生效。',
                '玩家的队伍生命由'+TecVO.getObject(1).name+'决定，升级科技会获得提升'
            ]
        }

        this.helpObj['tec'] = {
            title:'科技研究',
            list:[
                '玩家可通过科技研究提升自己的战力和资源生产效率',
                '科技研究需要耗费资源，不同的科技需求的资源种类各不相同，需求数量也会随着科技等级而提高',
                '进度条颜色中，红色表示离满足需求还差的比例，绿色表示升级资源占玩家当前所拥有资源的百分比',
                '【通用科技】：主城升级与其它非战力、资源类的科技',
                '【战力科技】：升级可提高玩家的总战力，可直接影响所有士兵和法术的属性',
                '【金币科技】：玩家每小时会自动获得金币，这里的科技等级越高获得金币也越多。',
                '【资源科技】：研究资源科技可增加玩家在战役中获得对应资源的数量',
            ]
        }




        this.helpObj['temp'] = {
            list:[
                '玩家的体力上限是'+UM.maxEnergy+',每['+30+'分钟]回复1点体力'
            ]
        }

        for(var s in this.helpObj)
        {
            var oo = this.helpObj[s];
            for(var ss in oo.list)
            {
                var text = oo.list[ss];
                this.infoList.push(text);
            }
        }

        for(var i=0;i<this.helpObj['card'].list.length;i++)
        {
            var str = this.helpObj['card'].list[i];
            if(str.indexOf('解锁') == -1)
            {
                this.helpObj['pk'].list.push(str)
            }
        }
    }




    public getInfoText(){
        var text = ArrayUtil.randomOne(this.infoList);
        return text.replace(/\[/g,'<font color="#E0A44A">').replace(/\]/g,'<\/font>')
    }

    public showHelp(key,fun?){
        HelpUI.getInstance().show(this.helpObj[key],fun);
    }



}